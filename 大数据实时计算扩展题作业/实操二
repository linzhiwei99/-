import java.util.{Properties, UUID}


import org.apache.flink.api.common.serialization.SimpleStringSchema
//import org.apache.flink.streaming.api.scala._
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer010


import org.apache.flink.streaming.api.scala.StreamExecutionEnvironment
import org.apache.flink.streaming.api.scala.function.ProcessAllWindowFunction
import org.apache.flink.streaming.api.windowing.time.Time
import org.apache.flink.streaming.api.windowing.windows.TimeWindow
import org.apache.flink.util.Collector
import org.apache.flink.api.scala._

import scala.collection.mutable

object Main {
  /**
   * 输入的主题名称
   */
  val inputTopic = "mn_buy_ticket_demo2"
  /**
   * kafkaT地址
   */


  val bootstrapServers = "bigdata35.depts.bingosoft.net:29035,bigdata36.depts.bingosoft.net:29036,bigdata37.depts.bingosoft.net:29037"
  def getCity(string: String): String={
    var result=new Array[String](4)
    result=string.split(",")
    var mid= result(3)
    return result(3).split(":")(1)
  }
  def main(args: Array[String]): Unit = {
    val env = StreamExecutionEnvironment.getExecutionEnvironment
    val kafkaProperties = new Properties()
    kafkaProperties.put("bootstrap.servers", bootstrapServers)
    kafkaProperties.put("group.id", UUID.randomUUID().toString)
    kafkaProperties.put("auto.offset.reset", "earliest")
    kafkaProperties.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer")
    kafkaProperties.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer")
    val kafkaConsumer = new FlinkKafkaConsumer010[String](inputTopic,
      new SimpleStringSchema, kafkaProperties)
    kafkaConsumer.setCommitOffsetsOnCheckpoints(true)
    val inputKafkaStream = env.addSource(kafkaConsumer)
    inputKafkaStream.map(x =>(getCity(x),1)).timeWindowAll(Time.seconds(5))
      .process(new ProcessAllWindowFunction[(String, Int), mutable.Map[String, Int], TimeWindow] {
        override def process(context: Context, elements: Iterable[(String, Int)], out: Collector[mutable.Map[String, Int]]): Unit = {
          val wordCountMap = mutable.Map[String, Int]()
          //定义两个数组，1 城市名 2 相对的数目
          var city: Array[String] = new Array[String](100)
          var cityNum = 0
          var touristNum: Array[Int] = new Array[Int](100)
          elements.foreach(kv => {
            //如果城市名数组没有当前的城市名，将当前城市名加入数组，并将城市数加一，并将对应的游客数设为一
            if (!city.contains(kv._1)) {
              city(cityNum) = kv._1
              touristNum(cityNum) = 1
              cityNum += 1
            }
            //否则，在城市名数组中找到该城市的下标，根据该下标找到游客数，使其加一
            else {
              var i = 0
              //i就是下标
              //100个城市数
              for (i <- 0 to 99) {
                if (city(i) == kv._1) {
                  touristNum(i) += 1
                }
              }
            }
          })
          //接下来需要得到touristNum前五的下标,根据下标找到前五的城市名，将其放入wordCountMap

          //定义一个tourist下标数组，每个元素的内容为下标，如index(0)=0
          var k=0
          var touristIndex :Array[Int]=new Array[Int](100)
          for(k<-0 to 99)
            {
                touristIndex(k)=k
            }
          //进行冒泡排序
          var i =0
          for(i<-0 to 98){
            var j=0
            for(j<-0 to 98-i){
              if(touristNum(j)<touristNum(j+1)){
                var temp=0
                temp=touristNum(j)
                touristNum(j)=touristNum(j+1)
                touristNum(j+1)=temp
                var temp1=0
                temp1=touristIndex(j)
                touristIndex(j)=touristIndex(j+1)
                touristIndex(j+1)=temp1
              }

            }
          }
          //排序完毕，获取touristIndex前五个数据touristIndex(i)，也就是下标，将city(touristIndex(i)与touristNum(i)放在map
          var p=0
          for(p<-0 to 4){
            wordCountMap.put(city(touristIndex(p)), touristNum(p))
          }
          //将wordCountMap发射，形式为[String,Int],然后直接输出
//          var e=0
//          for(e<-0 to cityNum-1)
//            {
//              wordCountMap.put(city(e),touristNum(e))
//            }

          out.collect(wordCountMap)
        }
      }).print()
      env.execute()
      }
    }


